//  85 page
//  가급적 같은 기능의 변수가 3개 이상이면 배열 사용
//       다른 기능의 변수가 3개 이상이면 클래스 사용
/*
 * 
 *   int kor1,kor2,kor3; int[3] kor
 *   int eng1,eng2,eng3;
 *   
 *   변수 여러개 > 일차원 배열 > 이차원 배열 > 삼차원 배열
 *   
 *  1. 배열 생성
 *     배열 - 연속적인 메모리 구조
 *             | 번호를 보유(인덱스)
 *     인덱스 - 항상 0번부터 순차적으로 시작
 *                | for(int i=0;i<8;i++)
 *     배열 선언
 *      데이터형[] 배열명;(권장)
 *      데이터형 배열명[];(C,C++ 호한)
 *     배열 초기화 - 데이터 메모리에 저장 > 저장하는 값
 *                                    | 초기화
 *      1) 정수형
 *          int[] arr{1,2,3,4,5} > 값을 알고 있을 때
 *                      | 다섯개의 메모리 공간을 연속적으로 배치
 *          int[] arr=new int[5] > 값을 모르고 있을 때
 *                      | 자동 초기화
 *                        int = 0
 *                        long = 0L
 *                        char = \u0000 > \0
 *                        float = 0.0F
 *                        double = 0.0
 *                        boolean = false
 *                        
 *                        [I@5ccd43c2 > 배열 주소
 *          int[] arr
 *          ---------
 *          주소를 참조하여 데이터를 관리 > 참조 변수
 *          Stack 공간에 저장         실제 데이터 저장 공간(Heap)
 *             arr                [I@5ccd43c2
 *          -----------                 -----------------
 *          [I@5ccd43c2        >        0 | 0 | 0 | 0 | 0
 *          -----------                 -----------------
 *                                  arr[0] [1] [2] [3] [4]
 *                                  > 인덱스 번호
 *                                  arr[0]   arr[1]   arr[2]...
 *                                  arr+0*4  arr+1*4  arr+2*4
 *                                   100      104      108
 *                                  long *8
 *                                  double *8
 *                                  char *2
 *          int a=10 > arr[0](변수) 
 *          arr[0]=10;
 *          arr[1]=100;
 *          
 *              > 연속적인 메모리 구조
 *                ----------
 *                인덱스 번호를 이용하여 접근
 *               1. 배치 > 인덱스 번호 부여(0번부터 요청한 갯수만큼)
 *               2. 인덱스 번호를 이용하여 데이터 값 첨부 / 수정 / 읽기
 *               3. 0부터 순차적이기 때문에 > 반복문으로 처리 가능
 *               
 *          종류
 *           정수 - int[] 배열명
 *           char - char[] 배열명
 *           실수 - double[] 배열명
 *           논리 - boolean[] 배열명
 *           문자열 - String[] 배열명
 *          생성 86 page
 *           new 데이터형[배열크기]
 *                     ------ 고정적 메모리
 *           new int[5] 정수를 저장할 수 있는 공간 5개를 모아달라
 *           --------------------
 *       	     |   |   |   |  
 *           --------------------
 *           >
 *            [0] [1] [2] [3] [4]
 *           --------------------
 *       	   0 | 0 | 0 | 0 | 0
 *           --------------------
 *           ------ 20byte ------
 *           배열의 갯수 확인 > 배열명.length
 *           
 *         데이터형[] 배열명
 *         ------- ----
 *         | > 배열에 저장되는 데이터의 종류
 *             점수 - 정수형 / 이름 - string / 평균 - double
 *             학점 - char / 통계 - long / 예약 여부 - boolean
 *        [] > > 배열기호
 *        [0] > 배열 인덱스(배열 첨자) > 저장위치
 *        배열명 - 실제 저장되어있는 주소를 참조 > 참조변수
 *        
 *    >> 가장 많이 사용되는 배열 생성
 *     > 데이터형[] 배열명=new 데이터형[배열 갯수 지정]
 *                              -----------
 *                       > 데이터 접근 - 배열명.length-1
 *                       > 배열의 인덱스를 벗어나면 해당 오류 발생
 *                         ArrayIndexOutOfBoundsExcption    
 *
 */
public class 배열_생성_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		// 배열선언
		int[] arr=new int[5]; // 배열(int > 5개를 모아서 관리)
		// 배열값 초기화
		for(int i=0;i<arr.length;i++)
		{
			arr[i]=(int)(Math.random()*100)+1;
			// i=0~ i=4
		}
		// 실제 값을 확인
		for(int i=0;i<arr.length;i++)
		{
			System.out.println("arr["+i+"]="+arr[i]);
		}
		System.out.println("======= 배열값 출력 =======");
		// 배열 값을 확인
		/*
		 *  92 page
		 *  > 출력용으로 사용 > for-each : 향상된 for문
		 *  for(데이터형 변수 : 배열(컬렉션))
		 *  {   -----       --------- 배열과 컬렉션만 사용 가능하며 배열에 선언된 데이터형과 동일
		 *       | 인덱스를 이용하지 않는다 > 실제 저장된 값을 순차적으로 가지고 온다
		 *       | 마지막 값을 읽어오면 자동 종료 
		 *       | WEB Front 핵심
		 *       | > 배열의 값 변경 및 추가 불가능
		 *           ---------------- 인덱스 번호
		 *  }
		 *  
		 *  int[] arr={1,2,3,4,5}
		 *    arr(Stack)      heap
		 *                  arr[0] arr[1] arr[2] arr[3] arr[4]
		 *                   | 0x100의 첫번째 값     
		 *  ------          ----------------------------------
		 *   0x100              1      2      3      4      5
		 *  ------          |---------------------------------
		 *                0x100
		 *                
		 *               arr변수 > 5개의 데이터를 제어
		 *   int[] arr={1,2,3,4,5}
		 *    | > 동일하거나 큰 데이터형을 사용            
		 *   for(int(long,double) 받는변수(a): arr)
		 *    > a=1
		 *    > a=2
		 *    > a=3
		 *    > a=4
		 *    > a=5
		 *    > 종료
		 *      인덱스를 이용하지 않고 실제 저장값을 이용
		 *      
		 */
		
	}

}
