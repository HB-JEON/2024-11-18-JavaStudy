/*
 * 
 *  데이터 저장  >  데이터 가공  >  결과값 출력
 *  |            | 연산자/제어문      | 브라우저
 *  | 변수 > 묶어서 한 개의 이름으로 제어  | 핸드폰
 *                                | 윈도우
 *  --------------------------------------
 *  관련된 데이터를 묶어서 사용 - 배열/클래스
 *  관련된 명령문을 묶어서 사용 - 메소드
 *  -------------------------- 자바의 기본 형식
 *  객체 지향 프로그램   5장
 *   배열 > 관련된 데이터를 여러개 모아서 하나의 이름으로 제어
 *    장점 - 여러 개의 변수를 한 번에 처리
 *           연속적인 메모리 구조 > 메모리 크기 동일
 *           같은 데이터형만 모아 관리
 *    단점 - 가변형(컬렉션)
 *           한번 선언 시 추가/삭제가 어려움
 *                 > 새롭게 큰 배열 생성
 *                 > 작은 배열을 생성
 *          같은 종류의 변수가 3개 이상이면 > 배열
 *  
 *  1. 배열 생성
 *    데이터형[] 배열명; (권장)
 *    데이터형 배열명[]
 *  2. 배열의 초기화 (값을 지정 / 변수 > 초기화)
 *    지역 변수 (메소드 안에 선언하는 변수)
 *    클래스(멤버변수) - 자동 초기화
 *   1) 선언과 동시에 초기화
 *       초기값을 지정 > 명시적 초기화
 *       int[] arr={1,2,3,4,5};> 데이터 검색 > 데이터 고정
 *       > String > 크롤링
 *      기본 데이터로 초기화 > 기본 데이터값 설정
 *      int[] arr=new int[5]
 *                     | 저장 갯수
 *       > 정수 5개를 모아서 관리
 *       > new를 이용하면 새로운 메모리를 만든다
 *         정수
 *          byte > 0
 *          int > 0
 *          long > 0L
 *         실수
 *          float > 0.0F
 *          doble > 0.0
 *         논리
 *          boolean > false
 *         문자
 *          char > '\u00000' > ''
 *         문자열
 *          String > null 지정된 주소가 없는 상태
 *               모든 클래스의 디폴트 값은 null
 *   *** 배열
 *    int[] 배열명
 *    double[] 배열명
 *    String[] 배열명
 *    char[] 배열명
 *    boolean[] 배열명
 *    
 *    선언 시 저장 갯수 확인
 *     int[] arr{1,2,3,4,5} > 5개 저장
 *     int[] arr=new int[5] > 갯수 고정
 *                            저장된 값은 변경 가능
 *                            저장된 메모리 크기는 변결 불가
 *                            arrycopy
 *                            새로운 배열
 *                            얕은 복사 - 같은 주소를 이용
 *                            깊은 복사 - 새로운 배열을 생성
 *                                       > clone()
 *                            같은 주소 이용           
 *            
 *   2) 선언 후 초기화
 *    int[] arr;
 *     > arr=new int[]{1,2,3,4,5}; > 메소드
 *    
 *   3) 출력(데이터 읽기)
 *    int[] arr={1,2,3,4,5}
 *   
 *     일반 for문 이용
 *     for(int i=0;i<1arr.lengthl;i++)
 *     {
 *         system.out.println(arr[i])
 *     }
 *     
 *    향상된 for문 이용 - 실제 배열에 저장된 데이터 읽기
 *     > 변경 불가능 > 출력만 가능
 *     for(int i:ㅁㄱㄱ)
 *     {
 *         system.out.println(arr[i])
 *     }
 *     
 *    라이브러리 이용 
 *     System.out.println(Arrays.toString(배열명))
 *    
 *    메모리에 저장되는 과정 메모리 주소를 참조해서 데이터 관리 > 참조 변수
 *    int[] arr=new int[5]
 *    Stack(데이터가 있는 메모리 주소) Heap(실제 데이터가 저장된 주소)
 *    
 *       ------arr------            -------------------
 *       null > 주소 배정이 안된 상태      0 | 0 | 0 | 0 | 0 
 *       ---------------           |-------------------
 *                                 0x100 > 가상
 *       ------arr------            -------------------
 *            0x100         >       0 | 0 | 0 | 0 | 0 
 *       ---------------           |-------------------
 *                                 0x100 > 가상
 *                                 
 *                                arr[0] > 0x100의 첫번째 값
 *                                arr[1] > 0x100의 두번째 값
 *                                ..
 *                                ..
 *                                ..
 *                                - 첫번째 자동으로 index/첨자를 붙여서 사용
 *                                - 인덱스를 이용하는 프로그램
 *                                  0부터 ~ 항상 순차적 > 반복문 사용 용이
 *                                  0부터 > 갯수보다 한개가 작다(배열명.lenght-1)
 *                                 > 배열명[0]
 *                                   배열명[1]
 *                                   ------- 일반 변수와 동일하게 사용
 *                                  값 읽기 > 배열명[0]
 *                                  값 변경 > 배열명[0]=100
 *                                > 여러개의 변수/클래스 > 사용하기 어려움
 *                                   | 배열    | 인터페이스
 *                                   | 한개의 이름으로 통일
 *                                - 데이터 묶기
 *                                 > 연속적인 메모리 구조 > 데이터 크기 동일
 *                                   한번 선언하면 변경이 어려움(고정적 데이터)
 *                                    | 보완하기 위해 라이브러리 지원(Collection) 10장
 *                                    | 웹에서 주로 사용
 *                                   
 *  
 */

import java.util.Arrays;
// 86 page 배열 생성 / 초기화
// 87 page 배열 선언
// 88 page 선언과 동시에 초기화
// 89 page 메모리 저장
// 92 page 향상된 for 문
// 95 page 데이터형의 변환
//    long[] arr={1,2,3,4,5} > long 변환
// *** 86 ~ 96 page *** 
public class 배열_1 {
	// 멤버변수 > 다른 클래스에서도 사용 가능 > heap
	// 프로그램 종료 시까지 사용 가능
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		// 지역변수 main 에서만 사용이 가능 > stack
		// main이 종료가 되면 자동으로 삭제
		// 정수 / 문자 / 문자열
		// 1. 정수 10개 저장 후 평균값 > 반복문 사용은 배열
		// 초기값 결정 > 0으로 디폴트
		int[] arr=new int[10];
		
		// 2. 초기화
		for(int i=0;i<arr.length;i++)
		{
			arr[i]=(int)(Math.random()*100)+1;
		}
		System.out.println(Arrays.toString(arr));
		// 3. 사용자 요청 처리
		double avg=0.0;
		// C언어는 시작과 동시에 사용하는 모든 변수를 선언
		// 자바는 필요 시마다 위치와 상관 없이 변수 선언이 가능
		int sum=0;
		for(int i:arr)
		{
			sum+=i;
		}
		// 4. 결과값
		String result=String.format("%.2f", sum/10.0);
		System.out.println(result);
		
		
	}

}
