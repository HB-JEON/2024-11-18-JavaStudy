/*
   classPlayingCard { 
	int kind; 
	intnum; 
	인스턴스 변수 – Heap 프로그램 종료까지 유지
	New 사용 시 메모리가 따로 배정
	
	static int width; 
	static int height; 
	정젹변수 – MethodArea 프로그램 종료까지 유지
	
	PlayingCard(int k, int n) { 
	kind = k; 
	num = n; 
	매개변수 – Stack 메모리 자체 관리 {} 종료되면 자동 삭제
	} 
	
   다음 중 생성자에 대한 설명으로 옳지 않은 것은? (모두 고르시오) 3 5
	1) 모든 생성자의 이름은 클래스의 이름과 동일해야한다.
	2) 생성자는 객체를 생성하기 위한 것이다.
	3) 클래스에는 생성자가 반드시 하나 이상 있어야 한다.
	4) 생성자가 없는 클래스는 컴파일러가 기본 생성자를 추가한다. > 기본 생성자(매개변수가 없는 생성자)
	5) 생성자는 오버로딩 할 수 없다.
	해설) 
	    클래스명과 동일
	    여러 개 생성 가능(오버로딩)
	    객체 생성 시에 호출
	    변수에 초기화
	    
   다음 중 this에 대한 설명으로 맞지 않은 것은? (모두 고르시오)  2
    1) 객체 자신을 가리키는 참조변수이다
    2) 클래스 내에서라면 어디서든 사용할 수 있다.
	3) 지역변수와 인스턴스변수를 구별할 때 사용한다.
	4) 클래스 메서드 내에서는 사용할 수 없다 (스태틱 메소드)
	해설)
	    this 모든 클래스에 존재 > static > 자신의 객체 > new 객체생성 시에 주소 값을 받아서 저장
		this 사용 위치 – 생성자/인스턴스 메소드

   다음 중 오버로딩이 성립하기 위한 조건이 아닌 것은? (모두 고르시오) 3 4
	1) 메서드의 이름이 같아야 한다.
	2) 매개변수의 개수나 타입이 달라야 한다.
	3) 리턴타입이 달라야 한다.
	4) 매개변수의 이름이 달라야 한다. 
	해설)
	    중복 메소드 정의 > 같은 메소드명으로 새로운 기능을 추가
		메소드명 동일
		매개변수의 개수 데이터형이 다르다
		리턴형은 관계 X
		
   오버로딩의 조건
	( 메소드명 ) 이름이 같아야 한다.
	( 매개변수 )의 개수 또는 타입이 달라야 한다.
	매개변수는 같고 ( 리턴형 )이 다른 경우는 오버로딩이 성립되지 않는다.

   다음 중 아래의 add 메소드를 올바르게 오버로딩 한 것은? (모두 고르시오) 2 3 4
	long add(int a, int b) { return a+b; }
	1) long add(int x, int y) { return x+y; }
	2) long add(long a, long b) { return a+b; }
	3) int add(byte a, byte b) { return a+b; }
	4) int add(long a, int b) { return (int)(a+b); }
	
   다음 중 초기화에 대한 설명으로 옳지 않은 것은? (모두 고르시오) 3 5
	1) 멤버변수는 자동 초기화되므로 초기화하지 않고도 값을 참고할 수 있다.
	2) 지역변수는 사용하기 전에 반드시 초기화해야 한다.
	3) 초기화 블럭보다 생성자가 먼저 수행된다.
	4) 명시적 초기화를 제일 우선적으로 고려해야 한다. 
	5) 클래스변수보다 인스턴스변수가 먼저 초기화된다.
	해설)
	    Class에서 초기화
		인스턴스변수 / 정적변수 > 디폴트값으로 기본 초기화
		기본값 > 명시적초기화 > static 블록 > 인스턴스 블록 > 생성자
		
   다음 중 인스턴스변수의 초기화 순서가 올바른 것은? 1
	1) 기본값-명시적초기화-초기화블럭-생성자
	2) 기본값-명시적초기화-생성자-초기화블럭
	3) 기본값-초기화블럭-명시적초기화-생성자
	4) 기본값-초기화블럭-생성자-명시적초기화
	
   다음 중 지역변수에 대한 설명으로 옳지 않은 것은? (모두 고르시오) 3 5
	1) 자동 초기화되므로 별도의 초기화가 필요없다.
	2) 지역변수가 선언된 메서드가 종료되면 지역변수도 함께 소멸된다.
	3) 메서드의 매개변수로 선언된 변수도 지역변수이다.
	4) 클래스변수나 인스턴스변수보다 메모리 부담이 적다.
	5) 힙(heap)영역에 생성되며 가비지컬렉터에 의해 소멸된다. Stack > 자동 소멸



   
*/