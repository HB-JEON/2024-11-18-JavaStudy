/*
 * 
 *  객체 지향 프로그램(OOP)

 *   1. 독립적으로 작동이 가능하게 실행
 *      ----------
 *      변수 +  메소드 > 모아서 연결
 *                    ------- 객체
 *                            설계 > 클래스
 *      기계의 부품(객체)를 조립(재사용 용이)
 *      부품(컴포넌트) > 컴포넌트 여러개를 묶은 후 조립
 *                   ----------------------
 *                     | 컨테이너
 *   
 *   2. 변수가 많아지거나 소스가 길어지면 > 분석 및 수정의 난이도 상승
 *     앞선 이유를 보완
 *     동일한 목적이나 기능을 수행하는 변수나 메소드를 묶은 후 한개의 파일을 제작 > 객체
 *     객체끼리 상호 통신(메소드) 전체 프로그램
 *     -----------------------------
 *       예)
 *          컴퓨터
 *            CPU / 하드 / GPU / 메모리
 *            ----------------------
 *             조립 > 메인보드
 *          사이트
 *            회원 관련, 예약, 구매(장바구니)
 *            커뮤니티, 영화 관련
 *            -----------------------
 *            메인 페이지에서 연결(조립) > 메뉴
 *  
 *  객체 지향 프로그램 특징
 *    1) 회원관련 - 사용자 데이터 보안(보호)
 *      > 캡슐화 / 정보은닉화
 *      > 접근 지정어(제어어)
 *        public / protected / private / default
 *    2) 사이트 - 커뮤니티 (공지, 자유게시판...)
 *      > 재사용 - 실요 시에 수정, 추가
 *        | 상속 - 메소드 변경(기능)
 *          포함 - 형태 그대로 사용
 *        extends - 확장된 클래스
 *    3) 재사용 - 수정, 요청에 따른 추가 기능
 *                   | 오버로딩(new)
 *              오버라이딩 > 기존의 기능 변경 > 상속 modify
 *       상속 - 중복 제거를 통하여 메모리를 효율적으로 사용
 *        단점) 속도 저하, 영향력이 크다
 *             스프링에서는 사용빈도가 매우 낮음              
 *             
 *  용어
 *    객체
 *    클래스
 *    멤버변수
 *    공유변수
 *    생성자
 *    메소드
 *  -------------------
 *  클래스 > 객체를 사용하기 위한 설계
 *    형식)
 *        [접근지정어][제어어] class ClassName
 *        {
 *            클래스 블록에서 선언 > 다른 클래스에서 사용 가능
 *            -------------------
 *            객체 생성 시 메모리에 각자 저장되는 변수 new 생성자()
 *             > 멤버변수 - Heap > 다른 데이터형을 모아서 저장
 *            메모리 공간을 한개만 만들어서 공유
 *             > 공유변수 - static
 *                | 영화목록 / 음악목록 / 회원관리
 *                  오라클(static) > 공유 목적
 *            -------------------
 *            변수 초기화 > 생성자
 *            -------- 없는 경우 생성자 생략 가능
 *         *** 생성자가 없는 경우 컴파일러가 자동으로 생성 ***
 *        }
 *              
 */

class Member
{
//	 자동으로 초기화
//	 int = 0 / long = 0L / string = null 
//	 boolean = false / double = 0.0
//	 필요 시 명시적 초기화 > String id="hong"; ** 우선순위 **
//	 명시적 초기화가 불가능
//	  구현 후 처리(제어문, 연산처리, 라이브러리)
//	  쿠키 읽기 > 초기화
//	  파일 읽기
//	  데이터베이스 연동
//	  생성자 / 초기화 블록
//	 클래스 블록에서는 선언만 가능
	String id;
	String name;
	// 생성사가 자동으로 추가
}
class MemberSystem
{
	Member[] members=new Member[10];
}
public class 클래스_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		MemberSystem ms1=new MemberSystem();
		ms1.members[0]=new Member();
		ms1.members[0].id="hong";
		ms1.members[0].name="홍길동";
		
		System.out.println("이이디:"+ms1.members[0].id);
		System.out.println(ms1.members[0].name);
		
		MemberSystem ms2=new MemberSystem();
		ms2.members[0]=new Member();
		System.out.println("이이디:"+ms2.members[0].id);
		System.out.println(ms2.members[0].name);
		
	}

}
